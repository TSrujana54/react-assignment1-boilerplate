{"version":3,"sources":["Components/header/Header.tsx","Components/footer/Footer.tsx","Components/card/Card.tsx","Components/dashboard/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","useStyles","makeStyles","theme","footer","flexGrow","textAlign","height","padding","bottom","marginTop","width","background","Footer","props","classes","data-testid","className","brand","root","maxWidth","marginBottom","media","pos","Card","CardActionArea","CardMedia","image","title","CardContent","gutterBottom","component","author","description","CardActions","Button","size","onClick","id","onReadLaterClick","bind","this","paper","control","spacing","Dashboard","useState","news","state","setstate","useEffect","fetch","then","res","json","data","articles","OnReadLaterClick","console","log","newsToBeReadLater","find","newsCard","source","method","headers","body","JSON","stringify","Grid","container","direction","alignItems","justify","map","key","urlToImage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oUA0BeA,EAlBA,WACX,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAChD,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,Y,QCZdC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,OAAQ,CACJC,SAAU,EACVC,UAAW,SACXC,OAAQ,GACRC,QAAS,GACTC,OAAQ,GACRC,UAAW,GACXC,MAAO,OACPC,WAAY,YAYLC,EATA,SAACC,GACZ,IAAMC,EAAUd,IAChB,OACI,yBAAKe,cAAY,UACb,wBAAIC,UAAWF,EAAQX,QAAvB,kBAAiDU,EAAMI,MAAvD,W,gECVNjB,EAAYC,YAAW,CAC3BiB,KAAM,CACJC,SAAU,IACVC,aAAc,GAEhBC,MAAO,CACLf,OAAQ,KAEVgB,IAAK,CACHF,aAAc,MAKH,SAASG,EAAeV,GACrC,IAAMC,EAAUd,IAIhB,OACE,kBAAC,IAAD,CAAgBgB,UAAWF,EAAQI,MACjC,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACET,UAAWF,EAAQO,MACnBK,MAAOb,EAAMa,MACbC,MAAOd,EAAMc,QAEf,kBAACC,EAAA,EAAD,KACE,kBAAC9B,EAAA,EAAD,CAAY+B,cAAY,EAAC9B,QAAQ,KAAK+B,UAAU,KAAKf,cAAY,SAChEF,EAAMc,OAEP,kBAAC7B,EAAA,EAAD,CAAYkB,UAAWF,EAAQQ,IAAK1B,MAAM,gBAAgBmB,cAAY,UACnEF,EAAMkB,QAET,kBAACjC,EAAA,EAAD,CAAYC,QAAQ,QAAQH,MAAM,gBAAgBkC,UAAU,IAAIf,cAAY,eAC1EF,EAAMmB,eAIZ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQvC,MAAM,UAAUwC,QAxBX,SAACC,GAC/BxB,EAAMyB,iBAAiBD,IAuBmDE,KAAKC,KAAK3B,EAAMwB,IAAKtB,cAAY,aAAvG,gBC7CR,IAAMf,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCgB,KAAM,CACJd,SAAU,EACVK,UAAU,IAGZgC,MAAO,CACLnC,OAAQ,IACRI,MAAO,KAETgC,QAAS,CACPnC,QAASL,EAAMyC,QAAQ,QAIZ,SAASC,IACtB,IAAM9B,EAAUd,IADkB,EAER6C,mBAAS,CAAEC,KAAM,KAFT,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAKlCC,qBAAU,WACRC,MAAM,0FACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIN,EAAS,CAAEF,KAAMQ,EAAKC,gBACpC,IATgC,IAY3BT,EAAQC,EAARD,KAGDU,EAAmB,SAACnB,GACxBoB,QAAQC,IAAIrB,GACZ,IAAIsB,EAAoBb,EAAKc,MAAK,SAACC,GAAD,OAAkBA,EAASC,OAAOzB,KAAOA,KAC3EoB,QAAQC,IAAI,QACZD,QAAQC,IAAIC,GACZT,MAAM,gCAAgC,CACpCa,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAKC,KAAKC,UAAUR,KACnBR,MAAK,SAAAC,GAAG,OAAIK,QAAQC,IAAIN,EAAIC,YAIjC,OACE,kBAACe,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,QAAQ,SAASxD,UAAWF,EAAQI,KAAMH,cAAY,YAEzG+B,EAAK2B,KAAI,SAACZ,GAAD,OACT,kBAAC,EAAD,CAAMxB,GAAIwB,EAASC,OAAOzB,GAAIqC,IAAKb,EAASC,OAAOzB,GAAIC,iBAAoBkB,EAAkB9B,MAASmC,EAASc,WAAYhD,MAASkC,EAASlC,MAAOI,OAAU8B,EAAS9B,OAAQC,YAAe6B,EAAS7B,kBCpChM4C,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAChC,EAAD,MACA,kBAAC,EAAD,QCCciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.748d34da.chunk.js","sourcesContent":["import React from 'react'\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst Header = () => {\n    return (\n        <div>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" >\n                        News\n</Typography>\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    footer: {\n        flexGrow: 1,\n        textAlign: \"center\",\n        height: 20,\n        padding: 20,\n        bottom: 30,\n        marginTop: 10,\n        width: \"100%\",\n        background: \"blue\"\n    }\n}));\nconst Footer = (props: any) => {\n    const classes = useStyles();\n    return (\n        <div data-testid=\"footer\">\n            <h3 className={classes.footer}>Copyright &copy; {props.brand} 2020</h3>\n        </div>\n    );\n}\n\nexport default Footer;\n\n\n\n\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card as MaterialUiCard} from '@material-ui/core';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n    marginBottom: 2\n  },\n  media: {\n    height: 140,\n  },\n  pos: {\n    marginBottom: 14,\n  \n  },\n});\n\nexport default function Card(this:any, props:any){\n  const classes = useStyles();\n  const onReadLaterClickHandler = (id: any) => {\n    props.onReadLaterClick(id);\n}\n  return (\n    <MaterialUiCard className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={props.image}\n          title={props.title}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" data-testid=\"title\">\n          {props.title}\n          </Typography>\n          <Typography className={classes.pos} color=\"textSecondary\" data-testid=\"author\">\n            {props.author}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" data-testid=\"description\">\n           {props.description}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\" onClick={onReadLaterClickHandler.bind(this,props.id)} data-testid=\"readLater\">\n          Read Later\n        </Button>\n      </CardActions>\n    </MaterialUiCard>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '../card/Card';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginTop:90\n    \n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [state, setstate] = useState({ news: [] });\n\n  //fetching data from newsapi.org\n  useEffect(()=>{\n    fetch('http://newsapi.org/v2/top-headlines?country=in&apiKey=08c07e0f13274b2eb61a0abd47357678')\n    .then(res => res.json())\n    .then(data => setstate({ news: data.articles }));\n  },[]);\n\n  //setting the state to news\n  const {news} = state;\n\n  //OnReadLater - saving data to read later\n  const OnReadLaterClick = (id:any) => {\n    console.log(id);\n    let newsToBeReadLater = news.find((newsCard:any )=> newsCard.source.id === id);\n    console.log('news');\n    console.log(newsToBeReadLater);\n    fetch('http://localhost:3001/profile',{\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body:JSON.stringify(newsToBeReadLater)\n    }).then(res => console.log(res.json()));\n  }\n\n  //mapping newscard details to dashboard\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\" className={classes.root} data-testid=\"newsGrid\">\n    {\n        news.map((newsCard: any) => \n        <Card id={newsCard.source.id} key={newsCard.source.id} onReadLaterClick = {OnReadLaterClick} image = {newsCard.urlToImage} title = {newsCard.title} author = {newsCard.author} description = {newsCard.description}/>\n        )\n    }\n    </Grid>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Header from './Components/header/Header'\nimport Footer from './Components/footer/Footer';\nimport Dashboard from './Components/dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <div >\n      <Header></Header>\n      <Dashboard/>\n      <Footer></Footer>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}